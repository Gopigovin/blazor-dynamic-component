@page "/"

@using DynamicComponentExample.Expence 

<div class="container" style="padding:20px 20px;">
    <div class="row">
        <div class="col-3">
            <h5>Expense Tracker</h5>
            <SfDropDownList TValue="Components" TItem="Components" DataSource="@componentList" @bind-Value="@componentValue">
                <DropDownListFieldSettings Text="ComponentName" Value="ComponentType"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <div class="col-9">
            <DynamicComponent Type="@(Type.GetType(componentValue.ComponentType))" Parameters="@componentValue.Param" />
        </div>
    </div>
</div>

@code {

    private Components componentValue { get; set; }
    public class Components
    {
        public string ComponentName { get; set; }

        public string ComponentType { get; set; }

        public Dictionary<string, object> Param { get; set; }
    }

    private List<Components> componentList { get; set; }

    [CascadingParameter]
    private ExpenseDataService ExpenseDataService { get; set; }

    private List<ExpenseData> LineChartData;
    private List<ExpenseData> ColChartIncomeData;
    private List<ExpenseData> ColChartExpenseData;
    private IEnumerable<ExpenseData> RecentExpenseData;
    private IEnumerable<ExpenseData> IncomeData;
    public IEnumerable<ExpenseData> ExpenseData;
    private List<TempExpenseData> TempExpenseDS;
    private List<TempExpenseData> TempIncomeDS;

    protected override async Task OnInitializedAsync()
    {
        InitializeData();
        this.componentList = new List<Components>()
        {
            new Components() { ComponentName = "Total Expenses", ComponentType = typeof(ExpPieChart).AssemblyQualifiedName, Param = new Dictionary<string, object>() { { "ExpenseData", ExpenseData } } },
            new Components() { ComponentName = "Account Balance", ComponentType = typeof(ExpLineChart).AssemblyQualifiedName, Param = new Dictionary<string, object>() { { "LineChartData", LineChartData } } },
            new Components() { ComponentName = "Income Expense", ComponentType = typeof(ExpColumnChart).AssemblyQualifiedName, Param = new Dictionary<string, object>() { { "ColChartIncomeData", ColChartIncomeData }, { "ColChartExpenseData", ColChartExpenseData } } },
            new Components() { ComponentName = "Recent Transactions", ComponentType = typeof(ExpGrid).AssemblyQualifiedName, Param = new Dictionary<string, object>() { { "RecentExpenseData", RecentExpenseData } } },
        };
        this.componentValue = componentList[0];
        await base.OnInitializedAsync();
    }

    private void InitializeData()
    {
        DateTime start = ExpenseDataService.StartDate; DateTime end = ExpenseDataService.EndDate;
        var commonData = ExpenseDataService.ExpenseData.Where(s => s.DateTime >= start && s.DateTime <= end);
        ExpenseDataService.SetCurrentData(commonData);
        var ExpenseD = new List<ExpenseData>();
        var IncomeD = new List<ExpenseData>();
        TempExpenseDS = new List<TempExpenseData>();
        TempIncomeDS = new List<TempExpenseData>();
        var CurDateTime = new ExpenseData();
        foreach (var data in commonData)
        {
            var tempData = new ExpenseData { Amount = data.Amount, Category = data.Category, DateTime = data.DateTime, Description = data.Description, FormattedDate = data.FormattedDate, MonthFull = data.MonthFull, MonthShort = data.MonthShort, PaymentMode = data.PaymentMode, TransactionType = data.TransactionType, UniqueId = data.UniqueId };
            if (data.TransactionType == "Expense")
            {
                ExpenseD.Add(data);
                int index = TempExpenseDS.FindIndex(s => s.Month == tempData.DateTime.Month);
                if (index >= 0)
                {
                    CurDateTime = TempExpenseDS[index].ExpenseData;
                    TempExpenseDS[index].ExpenseData.Amount = CurDateTime.Amount + tempData.Amount;
                }
                else
                {
                    TempExpenseDS.Add(new TempExpenseData { Month = tempData.DateTime.Month, ExpenseData = tempData });
                    index = TempExpenseDS.Count() - 1;
                    TempExpenseDS[index].ExpenseData.DateTime = new DateTime(TempExpenseDS[index].ExpenseData.DateTime.Year, TempExpenseDS[index].ExpenseData.DateTime.Month, 1, 0, 0, 0, 0);
                }
            }
            else
            {
                IncomeD.Add(data);
                int index = TempIncomeDS.FindIndex(s => s.Month == tempData.DateTime.Month);
                if (index >= 0)
                {
                    CurDateTime = TempIncomeDS[index].ExpenseData;
                    TempIncomeDS[index].ExpenseData.Amount = CurDateTime.Amount + tempData.Amount;
                }
                else
                {
                    TempIncomeDS.Add(new TempExpenseData { Month = tempData.DateTime.Month, ExpenseData = tempData });
                    index = TempIncomeDS.Count() - 1;
                    TempIncomeDS[index].ExpenseData.DateTime = new DateTime(TempIncomeDS[index].ExpenseData.DateTime.Year, TempIncomeDS[index].ExpenseData.DateTime.Month, 1, 0, 0, 0, 0);
                }
            }
        }
        ExpenseData = ExpenseD; IncomeData = IncomeD;
        RecentExpenseData = commonData.OrderByDescending(s => s.DateTime).Take(5);
        var LineD = new List<TempExpenseData>();
        var LineDS = new List<ExpenseData>();
        var ColIncomeDS = new List<ExpenseData>();
        foreach (var data in this.TempIncomeDS)
        {
            ColIncomeDS.Add(data.ExpenseData);
            ProcessLineData(data.ExpenseData, LineD, LineDS);
        }
        ColChartIncomeData = ColIncomeDS;
        var ColExpenseDS = new List<ExpenseData>();
        foreach (var data in TempExpenseDS)
        {
            ColExpenseDS.Add(data.ExpenseData);
            ProcessLineData(data.ExpenseData, LineD, LineDS);
        }
        ColChartExpenseData = ColExpenseDS;
        LineChartData = LineDS;
    }

    private void ProcessLineData(ExpenseData data, List<TempExpenseData> LineD, List<ExpenseData> LineDS)
    {
        var CurDateTime = new ExpenseData();
        var lineData = new ExpenseData { Amount = data.Amount, Category = data.Category, DateTime = data.DateTime, Description = data.Description, FormattedDate = data.FormattedDate, MonthFull = data.MonthFull, MonthShort = data.MonthShort, PaymentMode = data.PaymentMode, TransactionType = data.TransactionType, UniqueId = data.UniqueId };
        int idx = LineD.FindIndex(s => s.Month == lineData.DateTime.Month);
        if (idx >= 0)
        {
            CurDateTime = LineD[idx].ExpenseData;
            LineD[idx].ExpenseData.Amount = Math.Abs(CurDateTime.Amount - lineData.Amount);
        }
        else
        {
            LineD.Add(new TempExpenseData { Month = lineData.DateTime.Month, ExpenseData = lineData });
            LineDS.Add(LineD[LineD.Count - 1].ExpenseData);
        }
    }

    private class TempExpenseData
    {
        public int Month { get; set; }
        public ExpenseData ExpenseData { get; set; }
    }
}